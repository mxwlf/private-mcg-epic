//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Mcg.Edge.Domain.CustomerClients.Models;
using Mcg.Edge.Domain.TransformAndMap.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace FhirService.Plugin.Models
{
    using System = global::System;



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReadFhirRequest
    {
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid SessionId { get; set; }

        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FhirResourceType ResourceType { get; set; }

        [Newtonsoft.Json.JsonProperty("fhirVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FhirVersion FhirVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("criteria", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Criteria Criteria { get; set; } = new Criteria();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReadFhirRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReadFhirRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpicMedicationAdministrationRequest
    {
        [Newtonsoft.Json.JsonProperty("patientID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PatientID { get; set; }

        [Newtonsoft.Json.JsonProperty("patientIDType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PatientIDType { get; set; }

        [Newtonsoft.Json.JsonProperty("contactID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContactID { get; set; }

        [Newtonsoft.Json.JsonProperty("contactIDType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContactIDType { get; set; }

        [Newtonsoft.Json.JsonProperty("orderIDs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IdType> OrderIDs { get; set; } = new System.Collections.ObjectModel.Collection<IdType>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpicMedicationAdministrationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpicMedicationAdministrationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpicMedicationAdministrationResponse
    {
        [Newtonsoft.Json.JsonProperty("Orders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EpicMedicationAdminOrder> Orders { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpicMedicationAdministrationResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpicMedicationAdministrationResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpicMedicationAdminOrder
    {
        /// <summary>
        /// Whether or not the medication is currently active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Whether or not the medication is an infusion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInfusion", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsInfusion { get; set; }

        /// <summary>
        /// Whether or not the medication is a mixture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMixture", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsMixture { get; set; }

        /// <summary>
        /// An array containing the linked order IDs from the linked order group record, if the medication is part of a linked order group. Each order is represented as an array of IDType objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedOrderIDs", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<IdType> LinkedOrderIDs { get; set; }

        /// <summary>
        /// The linked order type (can be "And", "Or", or "Followed By"), if this medication is part of a linked order group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedOrderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkedOrderType { get; set; }

        /// <summary>
        /// An array of medication administrations associated with this order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medicationAdministrations", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<EpicMedicationAdministration> MedicationAdministrations { get; set; }

        /// <summary>
        /// The name of the medication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("orderID", Required = Newtonsoft.Json.Required.AllowNull)]
        public IdType OrderID { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpicMedicationAdminOrder FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpicMedicationAdminOrder>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpicMedicationAdministration
    {
        /// <summary>
        /// The Action associated with this administration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Action { get; set; }

        /// <summary>
        /// The date and time of this administration action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("administrationInstant", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? AdministrationInstant { get; set; }

        [Newtonsoft.Json.JsonProperty("dose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitValue Dose { get; set; }

        /// <summary>
        /// An array containing the order ID (and type) for the linked override order, if it is linked to an administration on a pharmacy order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedOverrideOrderID", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<IdType> LinkedOverrideOrderID { get; set; }

        /// <summary>
        /// If this administration's Action is a custom action this will be released action it is mapped to (if it exists).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappedAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MappedAction { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitValue Rate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpicMedicationAdministration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpicMedicationAdministration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnitValue
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The unit of measurement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnitValue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnitValue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpicCurrentMedicationsRequest
    {
        [Newtonsoft.Json.JsonProperty("patientID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PatientID { get; set; }

        [Newtonsoft.Json.JsonProperty("patientIDType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PatientIDType { get; set; }

        [Newtonsoft.Json.JsonProperty("userID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserID { get; set; }

        [Newtonsoft.Json.JsonProperty("userIDType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserIDType { get; set; }

        [Newtonsoft.Json.JsonProperty("profileView", Required = Newtonsoft.Json.Required.Always)]
        public int ProfileView { get; set; }

        [Newtonsoft.Json.JsonProperty("numberDaysToIncludeDiscontinuedAndEndedOrders", Required = Newtonsoft.Json.Required.Always)]
        public int NumberDaysToIncludeDiscontinuedAndEndedOrders { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpicCurrentMedicationsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpicCurrentMedicationsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EpicCurrentMedicationsResponse
    {
        [Newtonsoft.Json.JsonProperty("hasProblemLoadingOrders", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? HasProblemLoadingOrders { get; set; }

        [Newtonsoft.Json.JsonProperty("includeDiscontinuedAndEndedOrdersFromDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IncludeDiscontinuedAndEndedOrdersFromDate { get; set; }

        [Newtonsoft.Json.JsonProperty("includeDiscontinuedAndEndedOrdersToDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IncludeDiscontinuedAndEndedOrdersToDate { get; set; }

        [Newtonsoft.Json.JsonProperty("isPatientAdmitted", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsPatientAdmitted { get; set; }

        [Newtonsoft.Json.JsonProperty("medicationOrders", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<MedicationOrder> MedicationOrders { get; set; }

        [Newtonsoft.Json.JsonProperty("problemLoadingOrdersInformation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ProblemLoadingOrdersInformation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EpicCurrentMedicationsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpicCurrentMedicationsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MedicationOrder
    {
        [Newtonsoft.Json.JsonProperty("adminInstructionsHTML", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AdminInstructionsHTML { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("deaSchedule", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle DeaSchedule { get; set; }

        [Newtonsoft.Json.JsonProperty("discontinueInstant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DiscontinueInstant { get; set; }

        [Newtonsoft.Json.JsonProperty("discontinueReason", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle DiscontinueReason { get; set; }

        [Newtonsoft.Json.JsonProperty("discontinueUser", Required = Newtonsoft.Json.Required.AllowNull)]
        public RecordIDNameDisplayName DiscontinueUser { get; set; }

        [Newtonsoft.Json.JsonProperty("dispenseQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DispenseQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("dispenseQuantityUnit", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle DispenseQuantityUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("dose", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Dose { get; set; }

        [Newtonsoft.Json.JsonProperty("doseAdminDuration", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DoseAdminDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("doseAdminDurationUnit", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle DoseAdminDurationUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("doseUnit", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle DoseUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("editedSig", Required = Newtonsoft.Json.Required.AllowNull)]
        public string EditedSig { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("frequency", Required = Newtonsoft.Json.Required.AllowNull)]
        public RecordIDNameDisplayName Frequency { get; set; }

        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<IdType> Ids { get; set; }

        [Newtonsoft.Json.JsonProperty("indications", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<RecordIDNameDisplayName> Indications { get; set; }

        [Newtonsoft.Json.JsonProperty("indicationsComments", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IndicationsComments { get; set; }

        [Newtonsoft.Json.JsonProperty("infusionRate", Required = Newtonsoft.Json.Required.AllowNull)]
        public string InfusionRate { get; set; }

        [Newtonsoft.Json.JsonProperty("infusionRateUnit", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle InfusionRateUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("isClinicAdministered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsClinicAdministered { get; set; }

        [Newtonsoft.Json.JsonProperty("isLongTerm", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsLongTerm { get; set; }

        [Newtonsoft.Json.JsonProperty("isMixture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMixture { get; set; }

        [Newtonsoft.Json.JsonProperty("isPersistent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPersistent { get; set; }

        [Newtonsoft.Json.JsonProperty("isSuspended", Required = Newtonsoft.Json.Required.AllowNull)]
        public bool? IsSuspended { get; set; }

        [Newtonsoft.Json.JsonProperty("lastDispensedDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDispensedDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("orderedDose", Required = Newtonsoft.Json.Required.AllowNull)]
        public string OrderedDose { get; set; }

        [Newtonsoft.Json.JsonProperty("orderedDoseUnit", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle OrderedDoseUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("orderMode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string OrderMode { get; set; }

        [Newtonsoft.Json.JsonProperty("patientFriendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientFriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedSig", Required = Newtonsoft.Json.Required.AllowNull)]
        public PatientReportedSig PatientReportedSig { get; set; }

        [Newtonsoft.Json.JsonProperty("patientSig", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientSig { get; set; }

        [Newtonsoft.Json.JsonProperty("prescriptionNumber", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PrescriptionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("prnComment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PrnComment { get; set; }

        [Newtonsoft.Json.JsonProperty("prnReasons", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CategoryValueNumberAndTitle> PrnReasons { get; set; }

        [Newtonsoft.Json.JsonProperty("refillsFreeTextQuantity", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RefillsFreeTextQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("refillsQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RefillsQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("refillsRemaining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RefillsRemaining { get; set; }

        [Newtonsoft.Json.JsonProperty("refillsRemainingDisplay", Required = Newtonsoft.Json.Required.AllowNull)]
        public string RefillsRemainingDisplay { get; set; }

        [Newtonsoft.Json.JsonProperty("route", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle Route { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("startDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("translatedSig", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TranslatedSig { get; set; }

        [Newtonsoft.Json.JsonProperty("weightHeightChangedWarning", Required = Newtonsoft.Json.Required.AllowNull)]
        public string WeightHeightChangedWarning { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MedicationOrder FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MedicationOrder>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryValueNumberAndTitle
    {
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Number { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CategoryValueNumberAndTitle FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryValueNumberAndTitle>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordIDNameDisplayName
    {
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RecordIDNameDisplayName FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordIDNameDisplayName>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatientReportedSig
    {
        [Newtonsoft.Json.JsonProperty("enteredByUser", Required = Newtonsoft.Json.Required.AllowNull)]
        public RecordIDNameDisplayName EnteredByUser { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedDose", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientReportedDose { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedDoseUnit", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle PatientReportedDoseUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedFrequency", Required = Newtonsoft.Json.Required.AllowNull)]
        public RecordIDNameDisplayName PatientReportedFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedIndications", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<RecordIDNameDisplayName> PatientReportedIndications { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedIndicationsComments", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientReportedIndicationsComments { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedInstructions", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientReportedInstructions { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedPRNComment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientReportedPRNComment { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedPRNReasons", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<CategoryValueNumberAndTitle> PatientReportedPRNReasons { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedRoute", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle PatientReportedRoute { get; set; }

        [Newtonsoft.Json.JsonProperty("patientReportedSigText", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PatientReportedSigText { get; set; }

        [Newtonsoft.Json.JsonProperty("personReportedTheDifference", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle PersonReportedTheDifference { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonForTakingDifferently", Required = Newtonsoft.Json.Required.AllowNull)]
        public CategoryValueNumberAndTitle ReasonForTakingDifferently { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonForTakingDifferentlyComment", Required = Newtonsoft.Json.Required.AllowNull)]
        public string ReasonForTakingDifferentlyComment { get; set; }

        [Newtonsoft.Json.JsonProperty("reportedDateTime", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? ReportedDateTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PatientReportedSig FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PatientReportedSig>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdType
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Criteria : System.Collections.ObjectModel.Collection<FhirCriteria>
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Criteria FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Criteria>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FhirCriteria
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FhirCriteria FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FhirCriteria>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataError
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DataError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitializeResponse
    {
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResourceType { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Issue> Issue { get; set; } = new System.Collections.ObjectModel.Collection<Issue>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InitializeResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InitializeResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InitializeRequest
    {
        /// <summary>
        /// fhir server url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iss", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Iss { get; set; }

        [Newtonsoft.Json.JsonProperty("access_token", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Access_token { get; set; }

        [Newtonsoft.Json.JsonProperty("patient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Patient { get; set; }

        [Newtonsoft.Json.JsonProperty("encounter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Encounter { get; set; }

        [Newtonsoft.Json.JsonProperty("ehrVendor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EhrVendor EhrVendor { get; set; }

        [Newtonsoft.Json.JsonProperty("ehrFhirVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FhirVersion EhrFhirVersion { get; set; }

        /// <summary>
        /// session scope
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid SessionId { get; set; }

        /// <summary>
        /// site LMR for tenant IDs. ICM TenantId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// name of the ehr user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ehrUserId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EhrUserId { get; set; }

        /// <summary>
        /// name of the tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenantName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InitializeRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InitializeRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FhirVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DSTU2")]
        DSTU2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STU3")]
        STU3 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"R4")]
        R4 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"R5")]
        R5 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FhirResourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Coverage")]
        Coverage = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DiagnosticReport")]
        DiagnosticReport = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentReference")]
        DocumentReference = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Encounter")]
        Encounter = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Location")]
        Location = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Medication")]
        Medication = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MedicationRequest")]
        MedicationRequest = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Observation")]
        Observation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Organization")]
        Organization = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Patient")]
        Patient = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Practitioner")]
        Practitioner = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PractitionerRole")]
        PractitionerRole = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Procedure")]
        Procedure = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MedicationStatement")]
        MedicationStatement = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"MedicationAdministration")]
        MedicationAdministration = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MedicationOrder")]
        MedicationOrder = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Criteria")]
        Criteria = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Bundle")]
        Bundle = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EhrVendor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Epic")]
        Epic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cerner")]
        Cerner = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Meditech")]
        Meditech = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Microsoft")]
        Microsoft = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Issue
    {
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Severity Severity { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Code Code { get; set; }

        [Newtonsoft.Json.JsonProperty("diagnostics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Diagnostics { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Issue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Issue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Severity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fatal")]
        Fatal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"warning")]
        Warning = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"information")]
        Information = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"informational")]
        Informational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"exception")]
        Exception = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"forbidden")]
        Forbidden = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"timeout")]
        Timeout = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"not-found")]
        NotFound = 5,

    }

    /// <summary>
    /// This is used to pass fhir types around the system for transformation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FhirEnvelope
    {
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FhirResourceType ResourceType { get; set; }

        [Newtonsoft.Json.JsonProperty("fhirVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FhirVersion FhirVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("mapDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MapDirection MapDirection { get; set; }

        /// <summary>
        /// The content of this fhir type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FhirEnvelope FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FhirEnvelope>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Details FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Details>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// This is used by interpreted mapping (Liquid) to specify the direction the mapping is to/from. To or from the master version of FHIR.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.1.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MapDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ToMaster")]
        ToMaster = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FromMaster")]
        FromMaster = 1,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
